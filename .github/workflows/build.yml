name: Rust

on:
  push:
    branches: [ master ]
    # tags:
    # - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install latest stable Rust
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
    - uses: actions-rs/cargo@v1
      with:
        command: test
  release:
    needs: [test]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  build-and-upload:
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install latest stable Rust
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true
    - name: Build Release Binary
      id: build-release-binary
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release
    - name: Upload Release Binary
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
      id: upload-release-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./target/release/mister
        asset_name: "mister-${{github.ref}}-${{ matrix.os }}"
        asset_content_type: application/binary
    - name: Upload Release Binary Windows
      if: contains(matrix.os, 'windows')
      id: upload-release-binary-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./target/release/mister.exe
        asset_name: ${{ matrix.os }}
        asset_content_type: application/binary